<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jpa="http://www.springframework.org/schema/data/jpa" xsi:schemaLocation="http://www.springframework.org/schema/beans
 	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
 	http://www.springframework.org/schema/mvc
 	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
 	http://www.springframework.org/schema/context
 	http://www.springframework.org/schema/context/spring-context-4.0.xsd 
 	http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/data/jpa
    https://www.springframework.org/schema/data/jpa/spring-jpa.xsd
   ">

	<!-- ComponentScan specifica in quale package Spring deve cercare i componenti -->
	<context:component-scan base-package="controllers" />
	<context:component-scan base-package="services" />
	<jpa:repositories base-package="repositories" />

	<!-- i Bean sono oggetti di Spring,vengono instanziati autonomamente risolvendo le loro dipendenze all'avvio dell'app,infatti la prima cosa che viene fatta da Spring Ã¨ leggere il file
    spring-servlet.xml -->
	<bean class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" id="mioValidatore" />
	<mvc:annotation-driven validator="mioValidatore" />

	<!-- Il Bean dataSource si occupa di interfacciarsi col DB,dandogli url,user e password relativi -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/crudspring?useSSL=false" />
		<property name="user" value="root" />
		<property name="password" value="" />
		<property name="minPoolSize" value="3" />
		<property name="maxPoolSize" value="10" />
		<property name="maxIdleTime" value="10000" />
	</bean>

	<!-- Internal View Resolver va a specificare dove Spring deve cercare le View -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<mvc:interceptors>
		<bean class="interceptors.LoginInterceptor" />
	</mvc:interceptors>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="true" />
		<property name="database" value="MYSQL" />
	</bean>

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<!-- spring based scanning for entity classes-->
		<property name="packagesToScan" value="model" />
	</bean>

</beans>